<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Card.php" path="/Cards">
    <totals>
      <lines total="62" comments="19" code="43" executable="14" executed="14" percent="100.00"/>
      <methods count="3" tested="3" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Cards\Card" start="10" executable="14" executed="14" crap="9">
      <namespace name="App\Cards"/>
      <method name="__construct" signature="__construct(string $value, string $suit)" start="21" end="40" crap="7" executable="12" executed="12" coverage="100"/>
      <method name="getValue" signature="getValue(): string" start="47" end="50" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getSuit" signature="getSuit()" start="57" end="60" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <coverage>
      <line nr="23">
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testCreateCardInvalidValueStr"/>
        <covered by="App\Cards\CardTest::testCreateCardInvalidSuitStr"/>
        <covered by="App\Cards\CardTest::testGetValue"/>
        <covered by="App\Cards\CardTest::testGetSuit"/>
        <covered by="App\Cards\DeckTest::testCreatedeck"/>
        <covered by="App\Cards\DeckTest::testShuffle"/>
        <covered by="App\Cards\DeckTest::testDrawNegative"/>
        <covered by="App\Cards\DeckTest::testDrawTooManyCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\GraphicCardTest::testGetGraphic"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
        <covered by="App\Cards\HandTest::testGetCards"/>
        <covered by="App\Cards\HandTest::testAddCards"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="24">
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testCreateCardInvalidValueStr"/>
        <covered by="App\Cards\CardTest::testCreateCardInvalidSuitStr"/>
        <covered by="App\Cards\CardTest::testGetValue"/>
        <covered by="App\Cards\CardTest::testGetSuit"/>
        <covered by="App\Cards\DeckTest::testCreatedeck"/>
        <covered by="App\Cards\DeckTest::testShuffle"/>
        <covered by="App\Cards\DeckTest::testDrawNegative"/>
        <covered by="App\Cards\DeckTest::testDrawTooManyCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\GraphicCardTest::testGetGraphic"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
        <covered by="App\Cards\HandTest::testGetCards"/>
        <covered by="App\Cards\HandTest::testAddCards"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="25">
        <covered by="App\Cards\CardTest::testCreateCardInvalidValueStr"/>
      </line>
      <line nr="27">
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testCreateCardInvalidSuitStr"/>
        <covered by="App\Cards\CardTest::testGetValue"/>
        <covered by="App\Cards\CardTest::testGetSuit"/>
        <covered by="App\Cards\DeckTest::testCreatedeck"/>
        <covered by="App\Cards\DeckTest::testShuffle"/>
        <covered by="App\Cards\DeckTest::testDrawNegative"/>
        <covered by="App\Cards\DeckTest::testDrawTooManyCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\GraphicCardTest::testGetGraphic"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
        <covered by="App\Cards\HandTest::testGetCards"/>
        <covered by="App\Cards\HandTest::testAddCards"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="28">
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
      </line>
      <line nr="30">
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testCreateCardInvalidSuitStr"/>
        <covered by="App\Cards\CardTest::testGetValue"/>
        <covered by="App\Cards\CardTest::testGetSuit"/>
        <covered by="App\Cards\DeckTest::testCreatedeck"/>
        <covered by="App\Cards\DeckTest::testShuffle"/>
        <covered by="App\Cards\DeckTest::testDrawNegative"/>
        <covered by="App\Cards\DeckTest::testDrawTooManyCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\GraphicCardTest::testGetGraphic"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
        <covered by="App\Cards\HandTest::testGetCards"/>
        <covered by="App\Cards\HandTest::testAddCards"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="32">
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testCreateCardInvalidSuitStr"/>
        <covered by="App\Cards\CardTest::testGetValue"/>
        <covered by="App\Cards\CardTest::testGetSuit"/>
        <covered by="App\Cards\DeckTest::testCreatedeck"/>
        <covered by="App\Cards\DeckTest::testShuffle"/>
        <covered by="App\Cards\DeckTest::testDrawNegative"/>
        <covered by="App\Cards\DeckTest::testDrawTooManyCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\GraphicCardTest::testGetGraphic"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
        <covered by="App\Cards\HandTest::testGetCards"/>
        <covered by="App\Cards\HandTest::testAddCards"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="33">
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testCreateCardInvalidSuitStr"/>
        <covered by="App\Cards\CardTest::testGetValue"/>
        <covered by="App\Cards\CardTest::testGetSuit"/>
        <covered by="App\Cards\DeckTest::testCreatedeck"/>
        <covered by="App\Cards\DeckTest::testShuffle"/>
        <covered by="App\Cards\DeckTest::testDrawNegative"/>
        <covered by="App\Cards\DeckTest::testDrawTooManyCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\GraphicCardTest::testGetGraphic"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
        <covered by="App\Cards\HandTest::testGetCards"/>
        <covered by="App\Cards\HandTest::testAddCards"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="34">
        <covered by="App\Cards\CardTest::testCreateCardInvalidSuitStr"/>
      </line>
      <line nr="36">
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testGetValue"/>
        <covered by="App\Cards\CardTest::testGetSuit"/>
        <covered by="App\Cards\DeckTest::testCreatedeck"/>
        <covered by="App\Cards\DeckTest::testShuffle"/>
        <covered by="App\Cards\DeckTest::testDrawNegative"/>
        <covered by="App\Cards\DeckTest::testDrawTooManyCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\GraphicCardTest::testGetGraphic"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
        <covered by="App\Cards\HandTest::testGetCards"/>
        <covered by="App\Cards\HandTest::testAddCards"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="37">
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
      </line>
      <line nr="39">
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\CardTest::testCreateRandomBasicCard"/>
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testGetValue"/>
        <covered by="App\Cards\CardTest::testGetSuit"/>
        <covered by="App\Cards\DeckTest::testCreatedeck"/>
        <covered by="App\Cards\DeckTest::testShuffle"/>
        <covered by="App\Cards\DeckTest::testDrawNegative"/>
        <covered by="App\Cards\DeckTest::testDrawTooManyCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\GraphicCardTest::testCreateRandomGraphicCard"/>
        <covered by="App\Cards\GraphicCardTest::testGetGraphic"/>
        <covered by="App\Cards\HandTest::testCreateHand"/>
        <covered by="App\Cards\HandTest::testGetGraphics"/>
        <covered by="App\Cards\HandTest::testGetCards"/>
        <covered by="App\Cards\HandTest::testAddCards"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="49">
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testGetValue"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="59">
        <covered by="App\Cards\CardTest::testCreateGivenCard"/>
        <covered by="App\Cards\CardTest::testGetSuit"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Cards</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TypeError</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> * Class to represent a playing card with a suit and a value.</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="10">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Card</token>
      </line>
      <line no="11">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="12">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suit</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14"/>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="16">
        <token name="T_DOC_COMMENT">     * Constructs the class.</token>
      </line>
      <line no="17">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT">     * @param string $value the value of the card</token>
      </line>
      <line no="19">
        <token name="T_DOC_COMMENT">     * @param string $suit the suit of the card</token>
      </line>
      <line no="20">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"A"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"2"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"3"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"4"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"5"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"6"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"7"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"8"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"9"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"10"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"J"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Q"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"K"</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_EQUAL">!=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TypeError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Not a valid value!"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_null</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">random_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">12</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31"/>
      <line no="32">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$suits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"&#x2663;&#xFE0F;"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"&#x2666;&#xFE0F;"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"&#x2665;&#xFE0F;"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"&#x2660;&#xFE0F;"</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$suit</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suits</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_EQUAL">!=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TypeError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Not a valid suit!"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_null</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$suit</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$suit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suits</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">random_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">3</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">suit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suit</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="41"/>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="43">
        <token name="T_DOC_COMMENT">     * Method to return the value of the card.</token>
      </line>
      <line no="44">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="45">
        <token name="T_DOC_COMMENT">     * @return string the value.</token>
      </line>
      <line no="46">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getValue</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="51"/>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">     * Method to return the suit of the card.</token>
      </line>
      <line no="54">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     * @return string the suit.</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getSuit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">suit</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="61">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="62"/>
    </source>
  </file>
</phpunit>
