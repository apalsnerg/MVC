<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Player.php" path="/Cards">
    <totals>
      <lines total="112" comments="57" code="55" executable="18" executed="18" percent="100.00"/>
      <methods count="4" tested="4" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Cards\Player" start="10" executable="18" executed="18" crap="10">
      <namespace name="App\Cards"/>
      <method name="__construct" signature="__construct(mixed $identifier)" start="26" end="34" crap="3" executable="5" executed="5" coverage="100"/>
      <method name="getPoints" signature="getPoints(): int" start="41" end="44" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="addPoints" signature="addPoints(App\Cards\GraphicCard $card): void" start="51" end="61" crap="2" executable="6" executed="6" coverage="100"/>
      <method name="ace" signature="ace(string $option): void" start="68" end="78" crap="4" executable="6" executed="6" coverage="100"/>
    </class>
    <coverage>
      <line nr="28">
        <covered by="App\Cards\BankTest::testCreateBank"/>
        <covered by="App\Cards\BankTest::testBankEvalsDraw"/>
        <covered by="App\Cards\BankTest::testBankEvalsFold"/>
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\PlayerTest::testCreatePlayer"/>
        <covered by="App\Cards\PlayerTest::testCreatePlayerWrongIdentifier"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
        <covered by="App\Cards\PlayerTest::testAceLow"/>
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
        <covered by="App\Cards\PlayerTest::testAceWrongStringException"/>
      </line>
      <line nr="29">
        <covered by="App\Cards\BankTest::testCreateBank"/>
        <covered by="App\Cards\BankTest::testBankEvalsDraw"/>
        <covered by="App\Cards\BankTest::testBankEvalsFold"/>
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\PlayerTest::testCreatePlayer"/>
        <covered by="App\Cards\PlayerTest::testCreatePlayerWrongIdentifier"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
        <covered by="App\Cards\PlayerTest::testAceLow"/>
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
        <covered by="App\Cards\PlayerTest::testAceWrongStringException"/>
      </line>
      <line nr="30">
        <covered by="App\Cards\PlayerTest::testCreatePlayerWrongIdentifier"/>
      </line>
      <line nr="32">
        <covered by="App\Cards\BankTest::testCreateBank"/>
        <covered by="App\Cards\BankTest::testBankEvalsDraw"/>
        <covered by="App\Cards\BankTest::testBankEvalsFold"/>
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\PlayerTest::testCreatePlayer"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
        <covered by="App\Cards\PlayerTest::testAceLow"/>
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
        <covered by="App\Cards\PlayerTest::testAceWrongStringException"/>
      </line>
      <line nr="33">
        <covered by="App\Cards\BankTest::testCreateBank"/>
        <covered by="App\Cards\BankTest::testBankEvalsDraw"/>
        <covered by="App\Cards\BankTest::testBankEvalsFold"/>
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankFoldsIfHighScore"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankDrawsIfLowScore"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\GameTest::testGameCreatable"/>
        <covered by="App\Cards\GameTest::testFoldTurnIncrement"/>
        <covered by="App\Cards\GameTest::testEqualBankWins"/>
        <covered by="App\Cards\GameTest::testBankWinsPlayerTooMuch"/>
        <covered by="App\Cards\GameTest::testBankWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBankMoreButTooMuchLoses"/>
        <covered by="App\Cards\GameTest::testPlayerWinsIfMore"/>
        <covered by="App\Cards\GameTest::testBothLose"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\GameTest::testBankTurnAddsCards"/>
        <covered by="App\Cards\PlayerTest::testCreatePlayer"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
        <covered by="App\Cards\PlayerTest::testAceLow"/>
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
        <covered by="App\Cards\PlayerTest::testAceWrongStringException"/>
      </line>
      <line nr="43">
        <covered by="App\Cards\BankTest::testBankEvalAceHigh"/>
        <covered by="App\Cards\BankTest::testBankEvalAceLow"/>
        <covered by="App\Cards\BankTest::testBankAcceptsLetterCards"/>
        <covered by="App\Cards\GameTest::testBankTurnRandom"/>
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
        <covered by="App\Cards\PlayerTest::testAceLow"/>
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
      </line>
      <line nr="53">
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="54">
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="55">
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="57">
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="58">
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="60">
        <covered by="App\Cards\PlayerTest::testAddPoints"/>
      </line>
      <line nr="70">
        <covered by="App\Cards\PlayerTest::testAceLow"/>
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
        <covered by="App\Cards\PlayerTest::testAceWrongStringException"/>
      </line>
      <line nr="71">
        <covered by="App\Cards\PlayerTest::testAceWrongStringException"/>
      </line>
      <line nr="73">
        <covered by="App\Cards\PlayerTest::testAceLow"/>
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
      </line>
      <line nr="74">
        <covered by="App\Cards\PlayerTest::testAceLow"/>
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
      </line>
      <line nr="75">
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
      </line>
      <line nr="77">
        <covered by="App\Cards\PlayerTest::testAceLow"/>
        <covered by="App\Cards\PlayerTest::testAceHigh"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Cards</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TypeError</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> * Class to represent a player in the card game.</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="10">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Player</token>
      </line>
      <line no="11">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="12">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** @var CardHand $hand the player's hand of cards */</token>
      </line>
      <line no="13">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$hand</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14"/>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** @var mixed $identifier the player's identifier */</token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$identifier</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17"/>
      <line no="18">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** @var int $score how many points the player's hand is worth */</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$score</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20"/>
      <line no="21">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="22">
        <token name="T_DOC_COMMENT">     * Constructs the Player.</token>
      </line>
      <line no="23">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="24">
        <token name="T_DOC_COMMENT">     * @param mixed $identifier the identifier for the player.</token>
      </line>
      <line no="25">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$identifier</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hand</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">CardHand</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$identifier</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$identifier</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TypeError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Invalid identifier type!"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">identifier</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$identifier</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">score</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="35"/>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="37">
        <token name="T_DOC_COMMENT">     * Return the amount of points the player has.</token>
      </line>
      <line no="38">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="39">
        <token name="T_DOC_COMMENT">     * @return int the score</token>
      </line>
      <line no="40">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getPoints</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">score</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="45"/>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT">     * Add points to $score from a GraphicCard object.</token>
      </line>
      <line no="48">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="49">
        <token name="T_DOC_COMMENT">     * @param GraphicCard $card the GraphicCard to be evaluated</token>
      </line>
      <line no="50">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">addPoints</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">GraphicCard</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$card</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$totalPoints</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$card</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getValue</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$totalPoints</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS_EQUAL">+=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">intval</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="56"/>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$card</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">10</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"J"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Q"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"K"</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$totalPoints</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">10</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">score</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS_EQUAL">+=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$totalPoints</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="62"/>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="64">
        <token name="T_DOC_COMMENT">     * Add points to $this-&gt;score depending on how the player decides to use their ace.</token>
      </line>
      <line no="65">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="66">
        <token name="T_DOC_COMMENT">     * @param string $option whether to count as 11 or 1.</token>
      </line>
      <line no="67">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$option</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"low"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$option</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_EQUAL">!=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"low"</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$option</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_EQUAL">!=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"high"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TypeError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Invalid argument type!"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$score</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$option</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"high"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$score</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">11</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">score</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS_EQUAL">+=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$score</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="79"/>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//DEPRECATED</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/*</token>
      </line>
      <line no="82">
        <token name="T_COMMENT">    /**</token>
      </line>
      <line no="83">
        <token name="T_COMMENT">     * Method to turn a graphic representation of a card as a string into a GraphicCard object.</token>
      </line>
      <line no="84">
        <token name="T_COMMENT">     *</token>
      </line>
      <line no="85">
        <token name="T_COMMENT">     * @param string $str the string to be converted.</token>
      </line>
      <line no="86"/>
      <line no="87">
        <token name="T_COMMENT">    public function stringToCard(String $str) : GraphicCard</token>
      </line>
      <line no="88">
        <token name="T_COMMENT">    {</token>
      </line>
      <line no="89">
        <token name="T_COMMENT">        $str = trim($str, "[]");</token>
      </line>
      <line no="90">
        <token name="T_COMMENT">        $value = $str[0];</token>
      </line>
      <line no="91">
        <token name="T_COMMENT">        $tenSuit = null;</token>
      </line>
      <line no="92">
        <token name="T_COMMENT">        if (intval($str[0]) == 1 &amp;&amp; intval($str[1]) == 0) {</token>
      </line>
      <line no="93">
        <token name="T_COMMENT">            $value = "10";</token>
      </line>
      <line no="94">
        <token name="T_COMMENT">            $tenSuit = substr($str, 2);</token>
      </line>
      <line no="95">
        <token name="T_COMMENT">        }</token>
      </line>
      <line no="96">
        <token name="T_COMMENT">        if (!in_array($value, ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"])) {</token>
      </line>
      <line no="97">
        <token name="T_COMMENT">            throw new TypeError("Invalid argument: invalid value!");</token>
      </line>
      <line no="98">
        <token name="T_COMMENT">        }</token>
      </line>
      <line no="99"/>
      <line no="100">
        <token name="T_COMMENT">        $suit = substr($str, 1);</token>
      </line>
      <line no="101">
        <token name="T_COMMENT">        if (!in_array($suit, ["&#x2663;&#xFE0F;", "&#x2666;&#xFE0F;", "&#x2665;&#xFE0F;", "&#x2660;&#xFE0F;"])) {</token>
      </line>
      <line no="102">
        <token name="T_COMMENT">            throw new TypeError("Invalid argument: no suit provided!");</token>
      </line>
      <line no="103">
        <token name="T_COMMENT">        }</token>
      </line>
      <line no="104">
        <token name="T_COMMENT">        if (!empty($tenSuit)) {</token>
      </line>
      <line no="105">
        <token name="T_COMMENT">            $suit = $tenSuit;</token>
      </line>
      <line no="106">
        <token name="T_COMMENT">        }</token>
      </line>
      <line no="107"/>
      <line no="108">
        <token name="T_COMMENT">        return new GraphicCard($value, $suit);</token>
      </line>
      <line no="109">
        <token name="T_COMMENT">    }</token>
      </line>
      <line no="110">
        <token name="T_COMMENT">    */</token>
      </line>
      <line no="111">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="112"/>
    </source>
  </file>
</phpunit>
